/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { DiscountLinesResponse } from '../model';
import { GetOrderDiscountLinesResponse } from '../model';
import { OrderDiscountLinesRequest } from '../model';
import { UpdateOrderDiscountLinesRequest } from '../model';
/**
 * DiscountsApi - axios parameter creator
 * @export
 */
export declare const DiscountsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create discount lines for an existing orden
     * @summary Create Discount
     * @param {string} id Identifier of the resource
     * @param {OrderDiscountLinesRequest} orderDiscountLinesRequest requested field for a discount lines
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateDiscountLine: (id: string, orderDiscountLinesRequest: OrderDiscountLinesRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an existing discount lines for an existing orden
     * @summary Delete Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersDeleteDiscountLines: (id: string, discountLinesId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an existing discount lines for an existing orden
     * @summary Get Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersGetDiscountLine: (id: string, discountLinesId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get discount lines for an existing orden
     * @summary Get a List of Discount
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersGetDiscountLines: (id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing discount lines for an existing orden
     * @summary Update Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {UpdateOrderDiscountLinesRequest} updateOrderDiscountLinesRequest requested field for a discount lines
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersUpdateDiscountLines: (id: string, discountLinesId: string, updateOrderDiscountLinesRequest: UpdateOrderDiscountLinesRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DiscountsApi - functional programming interface
 * @export
 */
export declare const DiscountsApiFp: (configuration?: Configuration) => {
    /**
     * Create discount lines for an existing orden
     * @summary Create Discount
     * @param {string} id Identifier of the resource
     * @param {OrderDiscountLinesRequest} orderDiscountLinesRequest requested field for a discount lines
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateDiscountLine(id: string, orderDiscountLinesRequest: OrderDiscountLinesRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountLinesResponse>>;
    /**
     * Delete an existing discount lines for an existing orden
     * @summary Delete Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersDeleteDiscountLines(id: string, discountLinesId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountLinesResponse>>;
    /**
     * Get an existing discount lines for an existing orden
     * @summary Get Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersGetDiscountLine(id: string, discountLinesId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountLinesResponse>>;
    /**
     * Get discount lines for an existing orden
     * @summary Get a List of Discount
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersGetDiscountLines(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderDiscountLinesResponse>>;
    /**
     * Update an existing discount lines for an existing orden
     * @summary Update Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {UpdateOrderDiscountLinesRequest} updateOrderDiscountLinesRequest requested field for a discount lines
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersUpdateDiscountLines(id: string, discountLinesId: string, updateOrderDiscountLinesRequest: UpdateOrderDiscountLinesRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountLinesResponse>>;
};
/**
 * DiscountsApi - factory interface
 * @export
 */
export declare const DiscountsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create discount lines for an existing orden
     * @summary Create Discount
     * @param {string} id Identifier of the resource
     * @param {OrderDiscountLinesRequest} orderDiscountLinesRequest requested field for a discount lines
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateDiscountLine(id: string, orderDiscountLinesRequest: OrderDiscountLinesRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<DiscountLinesResponse>;
    /**
     * Delete an existing discount lines for an existing orden
     * @summary Delete Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersDeleteDiscountLines(id: string, discountLinesId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<DiscountLinesResponse>;
    /**
     * Get an existing discount lines for an existing orden
     * @summary Get Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersGetDiscountLine(id: string, discountLinesId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<DiscountLinesResponse>;
    /**
     * Get discount lines for an existing orden
     * @summary Get a List of Discount
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersGetDiscountLines(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: any): AxiosPromise<GetOrderDiscountLinesResponse>;
    /**
     * Update an existing discount lines for an existing orden
     * @summary Update Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {UpdateOrderDiscountLinesRequest} updateOrderDiscountLinesRequest requested field for a discount lines
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersUpdateDiscountLines(id: string, discountLinesId: string, updateOrderDiscountLinesRequest: UpdateOrderDiscountLinesRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<DiscountLinesResponse>;
};
/**
 * DiscountsApi - interface
 * @export
 * @interface DiscountsApi
 */
export interface DiscountsApiInterface {
    /**
     * Create discount lines for an existing orden
     * @summary Create Discount
     * @param {string} id Identifier of the resource
     * @param {OrderDiscountLinesRequest} orderDiscountLinesRequest requested field for a discount lines
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApiInterface
     */
    ordersCreateDiscountLine(id: string, orderDiscountLinesRequest: OrderDiscountLinesRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<DiscountLinesResponse>;
    /**
     * Delete an existing discount lines for an existing orden
     * @summary Delete Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApiInterface
     */
    ordersDeleteDiscountLines(id: string, discountLinesId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<DiscountLinesResponse>;
    /**
     * Get an existing discount lines for an existing orden
     * @summary Get Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApiInterface
     */
    ordersGetDiscountLine(id: string, discountLinesId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<DiscountLinesResponse>;
    /**
     * Get discount lines for an existing orden
     * @summary Get a List of Discount
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApiInterface
     */
    ordersGetDiscountLines(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: AxiosRequestConfig): AxiosPromise<GetOrderDiscountLinesResponse>;
    /**
     * Update an existing discount lines for an existing orden
     * @summary Update Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {UpdateOrderDiscountLinesRequest} updateOrderDiscountLinesRequest requested field for a discount lines
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApiInterface
     */
    ordersUpdateDiscountLines(id: string, discountLinesId: string, updateOrderDiscountLinesRequest: UpdateOrderDiscountLinesRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<DiscountLinesResponse>;
}
/**
 * DiscountsApi - object-oriented interface
 * @export
 * @class DiscountsApi
 * @extends {BaseAPI}
 */
export declare class DiscountsApi extends BaseAPI implements DiscountsApiInterface {
    /**
     * Create discount lines for an existing orden
     * @summary Create Discount
     * @param {string} id Identifier of the resource
     * @param {OrderDiscountLinesRequest} orderDiscountLinesRequest requested field for a discount lines
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    ordersCreateDiscountLine(id: string, orderDiscountLinesRequest: OrderDiscountLinesRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DiscountLinesResponse, any>>;
    /**
     * Delete an existing discount lines for an existing orden
     * @summary Delete Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    ordersDeleteDiscountLines(id: string, discountLinesId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DiscountLinesResponse, any>>;
    /**
     * Get an existing discount lines for an existing orden
     * @summary Get Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    ordersGetDiscountLine(id: string, discountLinesId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DiscountLinesResponse, any>>;
    /**
     * Get discount lines for an existing orden
     * @summary Get a List of Discount
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    ordersGetDiscountLines(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOrderDiscountLinesResponse, any>>;
    /**
     * Update an existing discount lines for an existing orden
     * @summary Update Discount
     * @param {string} id Identifier of the resource
     * @param {string} discountLinesId discount line id identifier
     * @param {UpdateOrderDiscountLinesRequest} updateOrderDiscountLinesRequest requested field for a discount lines
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    ordersUpdateDiscountLines(id: string, discountLinesId: string, updateOrderDiscountLinesRequest: UpdateOrderDiscountLinesRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DiscountLinesResponse, any>>;
}
