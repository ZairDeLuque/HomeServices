/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { BlacklistRuleResponse } from '../model';
import { CreateRiskRulesData } from '../model';
import { DeletedBlacklistRuleResponse } from '../model';
import { DeletedWhitelistRuleResponse } from '../model';
import { RiskRulesList } from '../model';
import { WhitelistlistRuleResponse } from '../model';
/**
 * AntifraudApi - axios parameter creator
 * @export
 */
export declare const AntifraudApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create blacklisted rule
     * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRuleBlacklist: (createRiskRulesData: CreateRiskRulesData, acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create whitelisted rule
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {CreateRiskRulesData} [createRiskRulesData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRuleWhitelist: (acceptLanguage?: 'es' | 'en', createRiskRulesData?: CreateRiskRulesData, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete blacklisted rule
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRuleBlacklist: (id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete whitelisted rule
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRuleWhitelist: (id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return all rules
     * @summary Get list of blacklisted rules
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRuleBlacklist: (acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return all rules
     * @summary Get a list of whitelisted rules
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRuleWhitelist: (acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AntifraudApi - functional programming interface
 * @export
 */
export declare const AntifraudApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create blacklisted rule
     * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRuleBlacklist(createRiskRulesData: CreateRiskRulesData, acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlacklistRuleResponse>>;
    /**
     *
     * @summary Create whitelisted rule
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {CreateRiskRulesData} [createRiskRulesData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRuleWhitelist(acceptLanguage?: 'es' | 'en', createRiskRulesData?: CreateRiskRulesData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhitelistlistRuleResponse>>;
    /**
     *
     * @summary Delete blacklisted rule
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRuleBlacklist(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletedBlacklistRuleResponse>>;
    /**
     *
     * @summary Delete whitelisted rule
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRuleWhitelist(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletedWhitelistRuleResponse>>;
    /**
     * Return all rules
     * @summary Get list of blacklisted rules
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRuleBlacklist(acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RiskRulesList>>;
    /**
     * Return all rules
     * @summary Get a list of whitelisted rules
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRuleWhitelist(acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RiskRulesList>>;
};
/**
 * AntifraudApi - factory interface
 * @export
 */
export declare const AntifraudApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create blacklisted rule
     * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRuleBlacklist(createRiskRulesData: CreateRiskRulesData, acceptLanguage?: 'es' | 'en', options?: any): AxiosPromise<BlacklistRuleResponse>;
    /**
     *
     * @summary Create whitelisted rule
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {CreateRiskRulesData} [createRiskRulesData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRuleWhitelist(acceptLanguage?: 'es' | 'en', createRiskRulesData?: CreateRiskRulesData, options?: any): AxiosPromise<WhitelistlistRuleResponse>;
    /**
     *
     * @summary Delete blacklisted rule
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRuleBlacklist(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<DeletedBlacklistRuleResponse>;
    /**
     *
     * @summary Delete whitelisted rule
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRuleWhitelist(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<DeletedWhitelistRuleResponse>;
    /**
     * Return all rules
     * @summary Get list of blacklisted rules
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRuleBlacklist(acceptLanguage?: 'es' | 'en', options?: any): AxiosPromise<RiskRulesList>;
    /**
     * Return all rules
     * @summary Get a list of whitelisted rules
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRuleWhitelist(acceptLanguage?: 'es' | 'en', options?: any): AxiosPromise<RiskRulesList>;
};
/**
 * AntifraudApi - interface
 * @export
 * @interface AntifraudApi
 */
export interface AntifraudApiInterface {
    /**
     *
     * @summary Create blacklisted rule
     * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApiInterface
     */
    createRuleBlacklist(createRiskRulesData: CreateRiskRulesData, acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): AxiosPromise<BlacklistRuleResponse>;
    /**
     *
     * @summary Create whitelisted rule
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {CreateRiskRulesData} [createRiskRulesData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApiInterface
     */
    createRuleWhitelist(acceptLanguage?: 'es' | 'en', createRiskRulesData?: CreateRiskRulesData, options?: AxiosRequestConfig): AxiosPromise<WhitelistlistRuleResponse>;
    /**
     *
     * @summary Delete blacklisted rule
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApiInterface
     */
    deleteRuleBlacklist(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<DeletedBlacklistRuleResponse>;
    /**
     *
     * @summary Delete whitelisted rule
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApiInterface
     */
    deleteRuleWhitelist(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<DeletedWhitelistRuleResponse>;
    /**
     * Return all rules
     * @summary Get list of blacklisted rules
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApiInterface
     */
    getRuleBlacklist(acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): AxiosPromise<RiskRulesList>;
    /**
     * Return all rules
     * @summary Get a list of whitelisted rules
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApiInterface
     */
    getRuleWhitelist(acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): AxiosPromise<RiskRulesList>;
}
/**
 * AntifraudApi - object-oriented interface
 * @export
 * @class AntifraudApi
 * @extends {BaseAPI}
 */
export declare class AntifraudApi extends BaseAPI implements AntifraudApiInterface {
    /**
     *
     * @summary Create blacklisted rule
     * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    createRuleBlacklist(createRiskRulesData: CreateRiskRulesData, acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BlacklistRuleResponse, any>>;
    /**
     *
     * @summary Create whitelisted rule
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {CreateRiskRulesData} [createRiskRulesData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    createRuleWhitelist(acceptLanguage?: 'es' | 'en', createRiskRulesData?: CreateRiskRulesData, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WhitelistlistRuleResponse, any>>;
    /**
     *
     * @summary Delete blacklisted rule
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    deleteRuleBlacklist(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeletedBlacklistRuleResponse, any>>;
    /**
     *
     * @summary Delete whitelisted rule
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    deleteRuleWhitelist(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeletedWhitelistRuleResponse, any>>;
    /**
     * Return all rules
     * @summary Get list of blacklisted rules
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    getRuleBlacklist(acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RiskRulesList, any>>;
    /**
     * Return all rules
     * @summary Get a list of whitelisted rules
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    getRuleWhitelist(acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RiskRulesList, any>>;
}
