/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { Product } from '../model';
import { ProductOrderResponse } from '../model';
import { UpdateProduct } from '../model';
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export declare const ProductsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new product for an existing order.
     * @summary Create Product
     * @param {string} id Identifier of the resource
     * @param {Product} product requested field for a product
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateProduct: (id: string, product: Product, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete product for an existing orden
     * @summary Delete Product
     * @param {string} id Identifier of the resource
     * @param {string} lineItemId identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersDeleteProduct: (id: string, lineItemId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing product for an existing orden
     * @summary Update Product
     * @param {string} id Identifier of the resource
     * @param {string} lineItemId identifier
     * @param {UpdateProduct} updateProduct requested field for products
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersUpdateProduct: (id: string, lineItemId: string, updateProduct: UpdateProduct, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProductsApi - functional programming interface
 * @export
 */
export declare const ProductsApiFp: (configuration?: Configuration) => {
    /**
     * Create a new product for an existing order.
     * @summary Create Product
     * @param {string} id Identifier of the resource
     * @param {Product} product requested field for a product
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateProduct(id: string, product: Product, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOrderResponse>>;
    /**
     * Delete product for an existing orden
     * @summary Delete Product
     * @param {string} id Identifier of the resource
     * @param {string} lineItemId identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersDeleteProduct(id: string, lineItemId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOrderResponse>>;
    /**
     * Update an existing product for an existing orden
     * @summary Update Product
     * @param {string} id Identifier of the resource
     * @param {string} lineItemId identifier
     * @param {UpdateProduct} updateProduct requested field for products
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersUpdateProduct(id: string, lineItemId: string, updateProduct: UpdateProduct, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOrderResponse>>;
};
/**
 * ProductsApi - factory interface
 * @export
 */
export declare const ProductsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new product for an existing order.
     * @summary Create Product
     * @param {string} id Identifier of the resource
     * @param {Product} product requested field for a product
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateProduct(id: string, product: Product, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<ProductOrderResponse>;
    /**
     * Delete product for an existing orden
     * @summary Delete Product
     * @param {string} id Identifier of the resource
     * @param {string} lineItemId identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersDeleteProduct(id: string, lineItemId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<ProductOrderResponse>;
    /**
     * Update an existing product for an existing orden
     * @summary Update Product
     * @param {string} id Identifier of the resource
     * @param {string} lineItemId identifier
     * @param {UpdateProduct} updateProduct requested field for products
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersUpdateProduct(id: string, lineItemId: string, updateProduct: UpdateProduct, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<ProductOrderResponse>;
};
/**
 * ProductsApi - interface
 * @export
 * @interface ProductsApi
 */
export interface ProductsApiInterface {
    /**
     * Create a new product for an existing order.
     * @summary Create Product
     * @param {string} id Identifier of the resource
     * @param {Product} product requested field for a product
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    ordersCreateProduct(id: string, product: Product, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<ProductOrderResponse>;
    /**
     * Delete product for an existing orden
     * @summary Delete Product
     * @param {string} id Identifier of the resource
     * @param {string} lineItemId identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    ordersDeleteProduct(id: string, lineItemId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<ProductOrderResponse>;
    /**
     * Update an existing product for an existing orden
     * @summary Update Product
     * @param {string} id Identifier of the resource
     * @param {string} lineItemId identifier
     * @param {UpdateProduct} updateProduct requested field for products
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    ordersUpdateProduct(id: string, lineItemId: string, updateProduct: UpdateProduct, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<ProductOrderResponse>;
}
/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export declare class ProductsApi extends BaseAPI implements ProductsApiInterface {
    /**
     * Create a new product for an existing order.
     * @summary Create Product
     * @param {string} id Identifier of the resource
     * @param {Product} product requested field for a product
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    ordersCreateProduct(id: string, product: Product, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProductOrderResponse, any>>;
    /**
     * Delete product for an existing orden
     * @summary Delete Product
     * @param {string} id Identifier of the resource
     * @param {string} lineItemId identifier
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    ordersDeleteProduct(id: string, lineItemId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProductOrderResponse, any>>;
    /**
     * Update an existing product for an existing orden
     * @summary Update Product
     * @param {string} id Identifier of the resource
     * @param {string} lineItemId identifier
     * @param {UpdateProduct} updateProduct requested field for products
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    ordersUpdateProduct(id: string, lineItemId: string, updateProduct: UpdateProduct, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProductOrderResponse, any>>;
}
