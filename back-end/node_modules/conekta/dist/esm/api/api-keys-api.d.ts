/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { ApiKeyCreateResponse } from '../model';
import { ApiKeyRequest } from '../model';
import { ApiKeyResponse } from '../model';
import { ApiKeyUpdateRequest } from '../model';
import { DeleteApiKeysResponse } from '../model';
import { GetApiKeysResponse } from '../model';
/**
 * ApiKeysApi - axios parameter creator
 * @export
 */
export declare const ApiKeysApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a api key
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest requested field for a api keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey: (apiKeyRequest: ApiKeyRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a api key that corresponds to a api key ID
     * @summary Delete Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey: (id: string, acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a api key that corresponds to a api key ID
     * @summary Get Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKey: (id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Consume the list of api keys you have
     * @summary Get list of Api Keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [search] General search, e.g. by id, description, prefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKeys: (acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, next?: string, previous?: string, search?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing api key
     * @summary Update Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {ApiKeyUpdateRequest} [apiKeyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApiKey: (id: string, acceptLanguage?: 'es' | 'en', apiKeyUpdateRequest?: ApiKeyUpdateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ApiKeysApi - functional programming interface
 * @export
 */
export declare const ApiKeysApiFp: (configuration?: Configuration) => {
    /**
     * Create a api key
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest requested field for a api keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey(apiKeyRequest: ApiKeyRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyCreateResponse>>;
    /**
     * Deletes a api key that corresponds to a api key ID
     * @summary Delete Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey(id: string, acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteApiKeysResponse>>;
    /**
     * Gets a api key that corresponds to a api key ID
     * @summary Get Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKey(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyResponse>>;
    /**
     * Consume the list of api keys you have
     * @summary Get list of Api Keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [search] General search, e.g. by id, description, prefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKeys(acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, next?: string, previous?: string, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiKeysResponse>>;
    /**
     * Update an existing api key
     * @summary Update Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {ApiKeyUpdateRequest} [apiKeyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApiKey(id: string, acceptLanguage?: 'es' | 'en', apiKeyUpdateRequest?: ApiKeyUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyResponse>>;
};
/**
 * ApiKeysApi - factory interface
 * @export
 */
export declare const ApiKeysApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a api key
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest requested field for a api keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey(apiKeyRequest: ApiKeyRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<ApiKeyCreateResponse>;
    /**
     * Deletes a api key that corresponds to a api key ID
     * @summary Delete Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey(id: string, acceptLanguage?: 'es' | 'en', options?: any): AxiosPromise<DeleteApiKeysResponse>;
    /**
     * Gets a api key that corresponds to a api key ID
     * @summary Get Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKey(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<ApiKeyResponse>;
    /**
     * Consume the list of api keys you have
     * @summary Get list of Api Keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [search] General search, e.g. by id, description, prefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKeys(acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, next?: string, previous?: string, search?: string, options?: any): AxiosPromise<GetApiKeysResponse>;
    /**
     * Update an existing api key
     * @summary Update Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {ApiKeyUpdateRequest} [apiKeyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApiKey(id: string, acceptLanguage?: 'es' | 'en', apiKeyUpdateRequest?: ApiKeyUpdateRequest, options?: any): AxiosPromise<ApiKeyResponse>;
};
/**
 * ApiKeysApi - interface
 * @export
 * @interface ApiKeysApi
 */
export interface ApiKeysApiInterface {
    /**
     * Create a api key
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest requested field for a api keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiInterface
     */
    createApiKey(apiKeyRequest: ApiKeyRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<ApiKeyCreateResponse>;
    /**
     * Deletes a api key that corresponds to a api key ID
     * @summary Delete Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiInterface
     */
    deleteApiKey(id: string, acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): AxiosPromise<DeleteApiKeysResponse>;
    /**
     * Gets a api key that corresponds to a api key ID
     * @summary Get Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiInterface
     */
    getApiKey(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<ApiKeyResponse>;
    /**
     * Consume the list of api keys you have
     * @summary Get list of Api Keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [search] General search, e.g. by id, description, prefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiInterface
     */
    getApiKeys(acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, next?: string, previous?: string, search?: string, options?: AxiosRequestConfig): AxiosPromise<GetApiKeysResponse>;
    /**
     * Update an existing api key
     * @summary Update Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {ApiKeyUpdateRequest} [apiKeyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiInterface
     */
    updateApiKey(id: string, acceptLanguage?: 'es' | 'en', apiKeyUpdateRequest?: ApiKeyUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ApiKeyResponse>;
}
/**
 * ApiKeysApi - object-oriented interface
 * @export
 * @class ApiKeysApi
 * @extends {BaseAPI}
 */
export declare class ApiKeysApi extends BaseAPI implements ApiKeysApiInterface {
    /**
     * Create a api key
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest requested field for a api keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    createApiKey(apiKeyRequest: ApiKeyRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiKeyCreateResponse, any>>;
    /**
     * Deletes a api key that corresponds to a api key ID
     * @summary Delete Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    deleteApiKey(id: string, acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteApiKeysResponse, any>>;
    /**
     * Gets a api key that corresponds to a api key ID
     * @summary Get Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    getApiKey(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiKeyResponse, any>>;
    /**
     * Consume the list of api keys you have
     * @summary Get list of Api Keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [search] General search, e.g. by id, description, prefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    getApiKeys(acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, next?: string, previous?: string, search?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetApiKeysResponse, any>>;
    /**
     * Update an existing api key
     * @summary Update Api Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {ApiKeyUpdateRequest} [apiKeyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    updateApiKey(id: string, acceptLanguage?: 'es' | 'en', apiKeyUpdateRequest?: ApiKeyUpdateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiKeyResponse, any>>;
}
