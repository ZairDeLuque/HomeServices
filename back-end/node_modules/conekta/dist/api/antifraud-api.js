"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AntifraudApi = exports.AntifraudApiFactory = exports.AntifraudApiFp = exports.AntifraudApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * AntifraudApi - axios parameter creator
 * @export
 */
const AntifraudApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create blacklisted rule
         * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRuleBlacklist: (createRiskRulesData, acceptLanguage, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'createRiskRulesData' is not null or undefined
            (0, common_1.assertParamExists)('createRuleBlacklist', 'createRiskRulesData', createRiskRulesData);
            const localVarPath = `/antifraud/blacklists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createRiskRulesData, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create whitelisted rule
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {CreateRiskRulesData} [createRiskRulesData]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRuleWhitelist: (acceptLanguage, createRiskRulesData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/antifraud/whitelists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createRiskRulesData, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete blacklisted rule
         * @param {string} id Identifier of the resource
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRuleBlacklist: (id, acceptLanguage, xChildCompanyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteRuleBlacklist', 'id', id);
            const localVarPath = `/antifraud/blacklists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete whitelisted rule
         * @param {string} id Identifier of the resource
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRuleWhitelist: (id, acceptLanguage, xChildCompanyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteRuleWhitelist', 'id', id);
            const localVarPath = `/antifraud/whitelists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Return all rules
         * @summary Get list of blacklisted rules
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleBlacklist: (acceptLanguage, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/antifraud/blacklists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Return all rules
         * @summary Get a list of whitelisted rules
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleWhitelist: (acceptLanguage, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/antifraud/whitelists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AntifraudApiAxiosParamCreator = AntifraudApiAxiosParamCreator;
/**
 * AntifraudApi - functional programming interface
 * @export
 */
const AntifraudApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AntifraudApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create blacklisted rule
         * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRuleBlacklist(createRiskRulesData, acceptLanguage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createRuleBlacklist(createRiskRulesData, acceptLanguage, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Create whitelisted rule
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {CreateRiskRulesData} [createRiskRulesData]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRuleWhitelist(acceptLanguage, createRiskRulesData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createRuleWhitelist(acceptLanguage, createRiskRulesData, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete blacklisted rule
         * @param {string} id Identifier of the resource
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRuleBlacklist(id, acceptLanguage, xChildCompanyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteRuleBlacklist(id, acceptLanguage, xChildCompanyId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete whitelisted rule
         * @param {string} id Identifier of the resource
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRuleWhitelist(id, acceptLanguage, xChildCompanyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteRuleWhitelist(id, acceptLanguage, xChildCompanyId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Return all rules
         * @summary Get list of blacklisted rules
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleBlacklist(acceptLanguage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRuleBlacklist(acceptLanguage, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Return all rules
         * @summary Get a list of whitelisted rules
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleWhitelist(acceptLanguage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRuleWhitelist(acceptLanguage, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AntifraudApiFp = AntifraudApiFp;
/**
 * AntifraudApi - factory interface
 * @export
 */
const AntifraudApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AntifraudApiFp)(configuration);
    return {
        /**
         *
         * @summary Create blacklisted rule
         * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRuleBlacklist(createRiskRulesData, acceptLanguage, options) {
            return localVarFp.createRuleBlacklist(createRiskRulesData, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create whitelisted rule
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {CreateRiskRulesData} [createRiskRulesData]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRuleWhitelist(acceptLanguage, createRiskRulesData, options) {
            return localVarFp.createRuleWhitelist(acceptLanguage, createRiskRulesData, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete blacklisted rule
         * @param {string} id Identifier of the resource
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRuleBlacklist(id, acceptLanguage, xChildCompanyId, options) {
            return localVarFp.deleteRuleBlacklist(id, acceptLanguage, xChildCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete whitelisted rule
         * @param {string} id Identifier of the resource
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRuleWhitelist(id, acceptLanguage, xChildCompanyId, options) {
            return localVarFp.deleteRuleWhitelist(id, acceptLanguage, xChildCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all rules
         * @summary Get list of blacklisted rules
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleBlacklist(acceptLanguage, options) {
            return localVarFp.getRuleBlacklist(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all rules
         * @summary Get a list of whitelisted rules
         * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleWhitelist(acceptLanguage, options) {
            return localVarFp.getRuleWhitelist(acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AntifraudApiFactory = AntifraudApiFactory;
/**
 * AntifraudApi - object-oriented interface
 * @export
 * @class AntifraudApi
 * @extends {BaseAPI}
 */
class AntifraudApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create blacklisted rule
     * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    createRuleBlacklist(createRiskRulesData, acceptLanguage, options) {
        return (0, exports.AntifraudApiFp)(this.configuration).createRuleBlacklist(createRiskRulesData, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create whitelisted rule
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {CreateRiskRulesData} [createRiskRulesData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    createRuleWhitelist(acceptLanguage, createRiskRulesData, options) {
        return (0, exports.AntifraudApiFp)(this.configuration).createRuleWhitelist(acceptLanguage, createRiskRulesData, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete blacklisted rule
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    deleteRuleBlacklist(id, acceptLanguage, xChildCompanyId, options) {
        return (0, exports.AntifraudApiFp)(this.configuration).deleteRuleBlacklist(id, acceptLanguage, xChildCompanyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete whitelisted rule
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    deleteRuleWhitelist(id, acceptLanguage, xChildCompanyId, options) {
        return (0, exports.AntifraudApiFp)(this.configuration).deleteRuleWhitelist(id, acceptLanguage, xChildCompanyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return all rules
     * @summary Get list of blacklisted rules
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    getRuleBlacklist(acceptLanguage, options) {
        return (0, exports.AntifraudApiFp)(this.configuration).getRuleBlacklist(acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return all rules
     * @summary Get a list of whitelisted rules
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    getRuleWhitelist(acceptLanguage, options) {
        return (0, exports.AntifraudApiFp)(this.configuration).getRuleWhitelist(acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AntifraudApi = AntifraudApi;
