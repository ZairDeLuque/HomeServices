/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CreateCustomerPaymentMethodsRequest } from '../model';
import { CreateCustomerPaymentMethodsResponse } from '../model';
import { GetPaymentMethodResponse } from '../model';
import { UpdateCustomerPaymentMethodsResponse } from '../model';
import { UpdatePaymentMethods } from '../model';
/**
 * PaymentMethodsApi - axios parameter creator
 * @export
 */
export declare const PaymentMethodsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a payment method for a customer.
     * @summary Create Payment Method
     * @param {string} id Identifier of the resource
     * @param {CreateCustomerPaymentMethodsRequest} createCustomerPaymentMethodsRequest requested field for customer payment methods
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPaymentMethods: (id: string, createCustomerPaymentMethodsRequest: CreateCustomerPaymentMethodsRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an existing payment method
     * @summary Delete Payment Method
     * @param {string} id Identifier of the resource
     * @param {string} paymentMethodId Identifier of the payment method
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerPaymentMethods: (id: string, paymentMethodId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of Payment Methods
     * @summary Get Payment Methods
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerPaymentMethods: (id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, next?: string, previous?: string, search?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a payment Method that corresponds to a customer ID.
     * @summary Update Payment Method
     * @param {string} id Identifier of the resource
     * @param {string} paymentMethodId Identifier of the payment method
     * @param {UpdatePaymentMethods} updatePaymentMethods requested field for customer payment methods
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPaymentMethods: (id: string, paymentMethodId: string, updatePaymentMethods: UpdatePaymentMethods, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PaymentMethodsApi - functional programming interface
 * @export
 */
export declare const PaymentMethodsApiFp: (configuration?: Configuration) => {
    /**
     * Create a payment method for a customer.
     * @summary Create Payment Method
     * @param {string} id Identifier of the resource
     * @param {CreateCustomerPaymentMethodsRequest} createCustomerPaymentMethodsRequest requested field for customer payment methods
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPaymentMethods(id: string, createCustomerPaymentMethodsRequest: CreateCustomerPaymentMethodsRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerPaymentMethodsResponse>>;
    /**
     * Delete an existing payment method
     * @summary Delete Payment Method
     * @param {string} id Identifier of the resource
     * @param {string} paymentMethodId Identifier of the payment method
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerPaymentMethods(id: string, paymentMethodId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomerPaymentMethodsResponse>>;
    /**
     * Get a list of Payment Methods
     * @summary Get Payment Methods
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerPaymentMethods(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, next?: string, previous?: string, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaymentMethodResponse>>;
    /**
     * Gets a payment Method that corresponds to a customer ID.
     * @summary Update Payment Method
     * @param {string} id Identifier of the resource
     * @param {string} paymentMethodId Identifier of the payment method
     * @param {UpdatePaymentMethods} updatePaymentMethods requested field for customer payment methods
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPaymentMethods(id: string, paymentMethodId: string, updatePaymentMethods: UpdatePaymentMethods, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomerPaymentMethodsResponse>>;
};
/**
 * PaymentMethodsApi - factory interface
 * @export
 */
export declare const PaymentMethodsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a payment method for a customer.
     * @summary Create Payment Method
     * @param {string} id Identifier of the resource
     * @param {CreateCustomerPaymentMethodsRequest} createCustomerPaymentMethodsRequest requested field for customer payment methods
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPaymentMethods(id: string, createCustomerPaymentMethodsRequest: CreateCustomerPaymentMethodsRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<CreateCustomerPaymentMethodsResponse>;
    /**
     * Delete an existing payment method
     * @summary Delete Payment Method
     * @param {string} id Identifier of the resource
     * @param {string} paymentMethodId Identifier of the payment method
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerPaymentMethods(id: string, paymentMethodId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<UpdateCustomerPaymentMethodsResponse>;
    /**
     * Get a list of Payment Methods
     * @summary Get Payment Methods
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerPaymentMethods(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, next?: string, previous?: string, search?: string, options?: any): AxiosPromise<GetPaymentMethodResponse>;
    /**
     * Gets a payment Method that corresponds to a customer ID.
     * @summary Update Payment Method
     * @param {string} id Identifier of the resource
     * @param {string} paymentMethodId Identifier of the payment method
     * @param {UpdatePaymentMethods} updatePaymentMethods requested field for customer payment methods
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPaymentMethods(id: string, paymentMethodId: string, updatePaymentMethods: UpdatePaymentMethods, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<UpdateCustomerPaymentMethodsResponse>;
};
/**
 * PaymentMethodsApi - interface
 * @export
 * @interface PaymentMethodsApi
 */
export interface PaymentMethodsApiInterface {
    /**
     * Create a payment method for a customer.
     * @summary Create Payment Method
     * @param {string} id Identifier of the resource
     * @param {CreateCustomerPaymentMethodsRequest} createCustomerPaymentMethodsRequest requested field for customer payment methods
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApiInterface
     */
    createCustomerPaymentMethods(id: string, createCustomerPaymentMethodsRequest: CreateCustomerPaymentMethodsRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<CreateCustomerPaymentMethodsResponse>;
    /**
     * Delete an existing payment method
     * @summary Delete Payment Method
     * @param {string} id Identifier of the resource
     * @param {string} paymentMethodId Identifier of the payment method
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApiInterface
     */
    deleteCustomerPaymentMethods(id: string, paymentMethodId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<UpdateCustomerPaymentMethodsResponse>;
    /**
     * Get a list of Payment Methods
     * @summary Get Payment Methods
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApiInterface
     */
    getCustomerPaymentMethods(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, next?: string, previous?: string, search?: string, options?: AxiosRequestConfig): AxiosPromise<GetPaymentMethodResponse>;
    /**
     * Gets a payment Method that corresponds to a customer ID.
     * @summary Update Payment Method
     * @param {string} id Identifier of the resource
     * @param {string} paymentMethodId Identifier of the payment method
     * @param {UpdatePaymentMethods} updatePaymentMethods requested field for customer payment methods
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApiInterface
     */
    updateCustomerPaymentMethods(id: string, paymentMethodId: string, updatePaymentMethods: UpdatePaymentMethods, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<UpdateCustomerPaymentMethodsResponse>;
}
/**
 * PaymentMethodsApi - object-oriented interface
 * @export
 * @class PaymentMethodsApi
 * @extends {BaseAPI}
 */
export declare class PaymentMethodsApi extends BaseAPI implements PaymentMethodsApiInterface {
    /**
     * Create a payment method for a customer.
     * @summary Create Payment Method
     * @param {string} id Identifier of the resource
     * @param {CreateCustomerPaymentMethodsRequest} createCustomerPaymentMethodsRequest requested field for customer payment methods
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    createCustomerPaymentMethods(id: string, createCustomerPaymentMethodsRequest: CreateCustomerPaymentMethodsRequest, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateCustomerPaymentMethodsResponse, any>>;
    /**
     * Delete an existing payment method
     * @summary Delete Payment Method
     * @param {string} id Identifier of the resource
     * @param {string} paymentMethodId Identifier of the payment method
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    deleteCustomerPaymentMethods(id: string, paymentMethodId: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateCustomerPaymentMethodsResponse, any>>;
    /**
     * Get a list of Payment Methods
     * @summary Get Payment Methods
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    getCustomerPaymentMethods(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, next?: string, previous?: string, search?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPaymentMethodResponse, any>>;
    /**
     * Gets a payment Method that corresponds to a customer ID.
     * @summary Update Payment Method
     * @param {string} id Identifier of the resource
     * @param {string} paymentMethodId Identifier of the payment method
     * @param {UpdatePaymentMethods} updatePaymentMethods requested field for customer payment methods
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    updateCustomerPaymentMethods(id: string, paymentMethodId: string, updatePaymentMethods: UpdatePaymentMethods, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateCustomerPaymentMethodsResponse, any>>;
}
