/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { GetWebhookKeysResponse } from '../model';
import { WebhookKeyCreateResponse } from '../model';
import { WebhookKeyDeleteResponse } from '../model';
import { WebhookKeyRequest } from '../model';
import { WebhookKeyResponse } from '../model';
import { WebhookKeyUpdateRequest } from '../model';
/**
 * WebhookKeysApi - axios parameter creator
 * @export
 */
export declare const WebhookKeysApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a webhook key
     * @summary Create Webhook Key
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyRequest} [webhookKeyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhookKey: (acceptLanguage?: 'es' | 'en', webhookKeyRequest?: WebhookKeyRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Webhook key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhookKey: (id: string, acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Webhook Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookKey: (id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Consume the list of webhook keys you have
     * @summary Get List of Webhook Keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookKeys: (acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * updates an existing webhook key
     * @summary Update Webhook Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWebhookKey: (id: string, acceptLanguage?: 'es' | 'en', webhookKeyUpdateRequest?: WebhookKeyUpdateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WebhookKeysApi - functional programming interface
 * @export
 */
export declare const WebhookKeysApiFp: (configuration?: Configuration) => {
    /**
     * Create a webhook key
     * @summary Create Webhook Key
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyRequest} [webhookKeyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhookKey(acceptLanguage?: 'es' | 'en', webhookKeyRequest?: WebhookKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookKeyCreateResponse>>;
    /**
     *
     * @summary Delete Webhook key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhookKey(id: string, acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookKeyDeleteResponse>>;
    /**
     *
     * @summary Get Webhook Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookKey(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookKeyResponse>>;
    /**
     * Consume the list of webhook keys you have
     * @summary Get List of Webhook Keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookKeys(acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWebhookKeysResponse>>;
    /**
     * updates an existing webhook key
     * @summary Update Webhook Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWebhookKey(id: string, acceptLanguage?: 'es' | 'en', webhookKeyUpdateRequest?: WebhookKeyUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookKeyResponse>>;
};
/**
 * WebhookKeysApi - factory interface
 * @export
 */
export declare const WebhookKeysApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a webhook key
     * @summary Create Webhook Key
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyRequest} [webhookKeyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhookKey(acceptLanguage?: 'es' | 'en', webhookKeyRequest?: WebhookKeyRequest, options?: any): AxiosPromise<WebhookKeyCreateResponse>;
    /**
     *
     * @summary Delete Webhook key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhookKey(id: string, acceptLanguage?: 'es' | 'en', options?: any): AxiosPromise<WebhookKeyDeleteResponse>;
    /**
     *
     * @summary Get Webhook Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookKey(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: any): AxiosPromise<WebhookKeyResponse>;
    /**
     * Consume the list of webhook keys you have
     * @summary Get List of Webhook Keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookKeys(acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: any): AxiosPromise<GetWebhookKeysResponse>;
    /**
     * updates an existing webhook key
     * @summary Update Webhook Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWebhookKey(id: string, acceptLanguage?: 'es' | 'en', webhookKeyUpdateRequest?: WebhookKeyUpdateRequest, options?: any): AxiosPromise<WebhookKeyResponse>;
};
/**
 * WebhookKeysApi - interface
 * @export
 * @interface WebhookKeysApi
 */
export interface WebhookKeysApiInterface {
    /**
     * Create a webhook key
     * @summary Create Webhook Key
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyRequest} [webhookKeyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApiInterface
     */
    createWebhookKey(acceptLanguage?: 'es' | 'en', webhookKeyRequest?: WebhookKeyRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookKeyCreateResponse>;
    /**
     *
     * @summary Delete Webhook key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApiInterface
     */
    deleteWebhookKey(id: string, acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): AxiosPromise<WebhookKeyDeleteResponse>;
    /**
     *
     * @summary Get Webhook Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApiInterface
     */
    getWebhookKey(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): AxiosPromise<WebhookKeyResponse>;
    /**
     * Consume the list of webhook keys you have
     * @summary Get List of Webhook Keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApiInterface
     */
    getWebhookKeys(acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: AxiosRequestConfig): AxiosPromise<GetWebhookKeysResponse>;
    /**
     * updates an existing webhook key
     * @summary Update Webhook Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApiInterface
     */
    updateWebhookKey(id: string, acceptLanguage?: 'es' | 'en', webhookKeyUpdateRequest?: WebhookKeyUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookKeyResponse>;
}
/**
 * WebhookKeysApi - object-oriented interface
 * @export
 * @class WebhookKeysApi
 * @extends {BaseAPI}
 */
export declare class WebhookKeysApi extends BaseAPI implements WebhookKeysApiInterface {
    /**
     * Create a webhook key
     * @summary Create Webhook Key
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyRequest} [webhookKeyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    createWebhookKey(acceptLanguage?: 'es' | 'en', webhookKeyRequest?: WebhookKeyRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WebhookKeyCreateResponse, any>>;
    /**
     *
     * @summary Delete Webhook key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    deleteWebhookKey(id: string, acceptLanguage?: 'es' | 'en', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WebhookKeyDeleteResponse, any>>;
    /**
     *
     * @summary Get Webhook Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    getWebhookKey(id: string, acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WebhookKeyResponse, any>>;
    /**
     * Consume the list of webhook keys you have
     * @summary Get List of Webhook Keys
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    getWebhookKeys(acceptLanguage?: 'es' | 'en', xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetWebhookKeysResponse, any>>;
    /**
     * updates an existing webhook key
     * @summary Update Webhook Key
     * @param {string} id Identifier of the resource
     * @param {'es' | 'en'} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    updateWebhookKey(id: string, acceptLanguage?: 'es' | 'en', webhookKeyUpdateRequest?: WebhookKeyUpdateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WebhookKeyResponse, any>>;
}
